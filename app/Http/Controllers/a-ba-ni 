おはようございます。

今日は個人開発記「自動デプロイ実装してみた」です。

過去数回webサービスをサーバーにアップしたことがあります。最初にサーバーにアップするときは色々と面倒なことがあるんですが、一旦gitを使ってアップしてしまえば以降の更新はサーバーに入って
$git pull origin master
をすればリモートリポジトリと同期できるようになります。

ただ、実際に本番サーバーにアップして確認するフェーズに入ると、機能の小さな調整だったり、見た目のクロスブラウザチェックをしたりと「細かい」修正が必要になります。

そうなると、「ローカルで更新」→「リモートにプッシュ」→「サーバーにssh接続してログイン」→「リモートからプル」という一連の流れを行わないといけないんですが、何度も何度もやっていると非常にイライラしてきます。慣れてきたら1分くらいで一連の処理をさばけるようにはなるんですが、チリツモでストレスえぐいことになってきます。

これを解決する手段として世の中には「自動デプロイ」なるものが存在し、有名どころで言うと『CircleCI』なんかを使えば実現できるはずっていうのは知ってましたが、新しい技術を学習する重い腰がなかなか上がりませんでした。

しかし今回の『みんなのポートフォリオサイト』の開発では基本的に新しい技術オンパレードで新技術習得への耐性がついたので一念発起して学習を始めました。

いろいろ調べてると、CircleCIやJenkinsといったCI/CDツールにおいて「自動ビルド・自動テスト・自動デプロイ」はセットの文脈で語られることが多く（自動ビルドって何？）、基本的には業務では「自動でテストして問題なければ自動デプロイをする」という使い方をされるようです。僕はとりあえず「マスターにプッシュしたらサーバーでマスターをプルする」という最小単位の機能がほしかったので、ヒットする情報は全て過剰でした。

さらに調査を進めていると、『GithubActions』なるものがいて、こいつでどうやら自動デプロイができるらしいということが分かりました。なんでも、CircleCIなんかよりも簡単だと。

こちらの記事（https://developer.yukimonkey.com/article/20200420/）を参考に実装することができましたが、自力では完成させることができず、『MENTA』を使ってメンターを募集してサポートしていただきながら無事に完成させることができました。

『GitHub Actionsを使ってEC2に自動SSH接続してデプロイしてみた』では、GithubActionsでの自動デプロイの前に、「
